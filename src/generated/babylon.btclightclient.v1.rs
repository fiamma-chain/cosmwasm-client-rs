// This file is @generated by prost-build.
/// Params defines the parameters for the module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// List of addresses which are allowed to insert headers to btc light client
    /// if the list is empty, any address can insert headers
    #[prost(string, repeated, tag = "1")]
    pub insert_headers_allow_list: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
}
/// QueryParamsRequest is the request type for the Query/Params RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
/// QueryParamsResponse is the response type for the Query/Params RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    /// params holds all the parameters of this module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
/// QueryHashesRequest is request type for the Query/Hashes RPC method.
/// It involves retrieving all hashes that are maintained by the module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryHashesRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        super::super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
/// QueryHashesResponse is response type for the Query/Hashes RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryHashesResponse {
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub hashes: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
/// QueryContainsRequest is request type for the Query/Contains RPC method.
/// It involves checking whether a hash is maintained by the module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryContainsRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub hash: ::prost::alloc::vec::Vec<u8>,
}
/// QueryContainsResponse is response type for the Query/Contains RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryContainsResponse {
    #[prost(bool, tag = "1")]
    pub contains: bool,
}
/// QueryContainsRequest is request type for the temporary Query/ContainsBytes
/// RPC method. It involves checking whether a hash is maintained by the module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryContainsBytesRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub hash: ::prost::alloc::vec::Vec<u8>,
}
/// QueryContainsResponse is response type for the temporary Query/ContainsBytes
/// RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryContainsBytesResponse {
    #[prost(bool, tag = "1")]
    pub contains: bool,
}
/// QueryMainChainRequest is request type for the Query/MainChain RPC method.
/// It involves retrieving the canonical chain maintained by the module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryMainChainRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        super::super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
/// QueryMainChainResponse is response type for the Query/MainChain RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryMainChainResponse {
    #[prost(message, repeated, tag = "1")]
    pub headers: ::prost::alloc::vec::Vec<BtcHeaderInfoResponse>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
/// QueryTipRequest is the request type for the Query/Tip RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryTipRequest {}
/// QueryTipResponse is the response type for the Query/Tip RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTipResponse {
    #[prost(message, optional, tag = "1")]
    pub header: ::core::option::Option<BtcHeaderInfoResponse>,
}
/// QueryBaseHeaderRequest is the request type for the Query/BaseHeader RPC
/// method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryBaseHeaderRequest {}
/// QueryBaseHeaderResponse is the response type for the Query/BaseHeader RPC
/// method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryBaseHeaderResponse {
    #[prost(message, optional, tag = "1")]
    pub header: ::core::option::Option<BtcHeaderInfoResponse>,
}
/// QueryMainChainDepthRequest is the request type for the Query/MainChainDepth RPC
/// it contains hex encoded hash of btc block header as parameter
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryHeaderDepthRequest {
    #[prost(string, tag = "1")]
    pub hash: ::prost::alloc::string::String,
}
/// QueryMainChainDepthResponse is the response type for the Query/MainChainDepth RPC
/// it contains depth of the block in main chain
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryHeaderDepthResponse {
    #[prost(uint32, tag = "1")]
    pub depth: u32,
}
/// BTCHeaderInfoResponse is a structure that contains all relevant information about a
/// BTC header response
///   - Full header as string hex.
///   - Header hash for easy retrieval as string hex.
///   - Height of the header in the BTC chain.
///   - Total work spent on the header. This is the sum of the work corresponding
///   to the header Bits field
///     and the total work of the header.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BtcHeaderInfoResponse {
    #[prost(string, tag = "1")]
    pub header_hex: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub hash_hex: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub height: u32,
    /// Work is the sdkmath.Uint as string.
    #[prost(string, tag = "4")]
    pub work: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Params queries the parameters of the module.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/babylon.btclightclient.v1.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("babylon.btclightclient.v1.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
        /// Hashes retrieves the hashes maintained by the module.
        pub async fn hashes(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryHashesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryHashesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/babylon.btclightclient.v1.Query/Hashes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("babylon.btclightclient.v1.Query", "Hashes"));
            self.inner.unary(req, path, codec).await
        }
        /// Contains checks whether a hash is maintained by the module.
        pub async fn contains(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryContainsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryContainsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/babylon.btclightclient.v1.Query/Contains",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("babylon.btclightclient.v1.Query", "Contains"));
            self.inner.unary(req, path, codec).await
        }
        /// ContainsBytes is a temporary method that
        /// checks whether a hash is maintained by the module.
        /// See discussion at https://github.com/babylonlabs-io/babylon/pull/132
        /// for more details.
        pub async fn contains_bytes(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryContainsBytesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryContainsBytesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/babylon.btclightclient.v1.Query/ContainsBytes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("babylon.btclightclient.v1.Query", "ContainsBytes"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// MainChain returns the canonical chain
        pub async fn main_chain(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryMainChainRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryMainChainResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/babylon.btclightclient.v1.Query/MainChain",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("babylon.btclightclient.v1.Query", "MainChain"));
            self.inner.unary(req, path, codec).await
        }
        /// Tip return best header on canonical chain
        pub async fn tip(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryTipRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryTipResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/babylon.btclightclient.v1.Query/Tip",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("babylon.btclightclient.v1.Query", "Tip"));
            self.inner.unary(req, path, codec).await
        }
        /// BaseHeader returns the base BTC header of the chain. This header is defined
        /// on genesis.
        pub async fn base_header(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryBaseHeaderRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryBaseHeaderResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/babylon.btclightclient.v1.Query/BaseHeader",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("babylon.btclightclient.v1.Query", "BaseHeader"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// HeaderDepth returns the depth of the header in main chain or error if the
        /// block is not found or it exists on fork
        pub async fn header_depth(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryHeaderDepthRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryHeaderDepthResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/babylon.btclightclient.v1.Query/HeaderDepth",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("babylon.btclightclient.v1.Query", "HeaderDepth"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod query_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with QueryServer.
    #[async_trait]
    pub trait Query: std::marker::Send + std::marker::Sync + 'static {
        /// Params queries the parameters of the module.
        async fn params(
            &self,
            request: tonic::Request<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        >;
        /// Hashes retrieves the hashes maintained by the module.
        async fn hashes(
            &self,
            request: tonic::Request<super::QueryHashesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryHashesResponse>,
            tonic::Status,
        >;
        /// Contains checks whether a hash is maintained by the module.
        async fn contains(
            &self,
            request: tonic::Request<super::QueryContainsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryContainsResponse>,
            tonic::Status,
        >;
        /// ContainsBytes is a temporary method that
        /// checks whether a hash is maintained by the module.
        /// See discussion at https://github.com/babylonlabs-io/babylon/pull/132
        /// for more details.
        async fn contains_bytes(
            &self,
            request: tonic::Request<super::QueryContainsBytesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryContainsBytesResponse>,
            tonic::Status,
        >;
        /// MainChain returns the canonical chain
        async fn main_chain(
            &self,
            request: tonic::Request<super::QueryMainChainRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryMainChainResponse>,
            tonic::Status,
        >;
        /// Tip return best header on canonical chain
        async fn tip(
            &self,
            request: tonic::Request<super::QueryTipRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryTipResponse>,
            tonic::Status,
        >;
        /// BaseHeader returns the base BTC header of the chain. This header is defined
        /// on genesis.
        async fn base_header(
            &self,
            request: tonic::Request<super::QueryBaseHeaderRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryBaseHeaderResponse>,
            tonic::Status,
        >;
        /// HeaderDepth returns the depth of the header in main chain or error if the
        /// block is not found or it exists on fork
        async fn header_depth(
            &self,
            request: tonic::Request<super::QueryHeaderDepthRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryHeaderDepthResponse>,
            tonic::Status,
        >;
    }
    /// Query defines the gRPC querier service.
    #[derive(Debug)]
    pub struct QueryServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> QueryServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for QueryServer<T>
    where
        T: Query,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/babylon.btclightclient.v1.Query/Params" => {
                    #[allow(non_camel_case_types)]
                    struct ParamsSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::QueryParamsRequest>
                    for ParamsSvc<T> {
                        type Response = super::QueryParamsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryParamsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ParamsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/babylon.btclightclient.v1.Query/Hashes" => {
                    #[allow(non_camel_case_types)]
                    struct HashesSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::QueryHashesRequest>
                    for HashesSvc<T> {
                        type Response = super::QueryHashesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryHashesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::hashes(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = HashesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/babylon.btclightclient.v1.Query/Contains" => {
                    #[allow(non_camel_case_types)]
                    struct ContainsSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryContainsRequest>
                    for ContainsSvc<T> {
                        type Response = super::QueryContainsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryContainsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::contains(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ContainsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/babylon.btclightclient.v1.Query/ContainsBytes" => {
                    #[allow(non_camel_case_types)]
                    struct ContainsBytesSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryContainsBytesRequest>
                    for ContainsBytesSvc<T> {
                        type Response = super::QueryContainsBytesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryContainsBytesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::contains_bytes(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ContainsBytesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/babylon.btclightclient.v1.Query/MainChain" => {
                    #[allow(non_camel_case_types)]
                    struct MainChainSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryMainChainRequest>
                    for MainChainSvc<T> {
                        type Response = super::QueryMainChainResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryMainChainRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::main_chain(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = MainChainSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/babylon.btclightclient.v1.Query/Tip" => {
                    #[allow(non_camel_case_types)]
                    struct TipSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::QueryTipRequest>
                    for TipSvc<T> {
                        type Response = super::QueryTipResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryTipRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::tip(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TipSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/babylon.btclightclient.v1.Query/BaseHeader" => {
                    #[allow(non_camel_case_types)]
                    struct BaseHeaderSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryBaseHeaderRequest>
                    for BaseHeaderSvc<T> {
                        type Response = super::QueryBaseHeaderResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryBaseHeaderRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::base_header(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = BaseHeaderSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/babylon.btclightclient.v1.Query/HeaderDepth" => {
                    #[allow(non_camel_case_types)]
                    struct HeaderDepthSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryHeaderDepthRequest>
                    for HeaderDepthSvc<T> {
                        type Response = super::QueryHeaderDepthResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryHeaderDepthRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::header_depth(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = HeaderDepthSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for QueryServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "babylon.btclightclient.v1.Query";
    impl<T> tonic::server::NamedService for QueryServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
